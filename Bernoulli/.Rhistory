geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]+beta[3]*xx[j]
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 3000,
n.iter     = 5000)
# check results
print(jagsfit,intervals=c(0.025, 0.975),justify = "left", digits=2)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
# Bin data for visualization
binx<-0.25
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
# Construct data dictionary
logitmod <-data.frame(by, x1)
X <- model.matrix(~ 1+x1,
data = logitmod)
K <- ncol(X)
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
xx = xx,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]+beta[3]*xx[j]
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 3000,
n.iter     = 5000)
# check results
print(jagsfit,intervals=c(0.025, 0.975),justify = "left", digits=2)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
# Bin data for visualization
binx<-0.25
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], xx[j])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 3000,
n.iter     = 5000)
# check results
print(jagsfit,intervals=c(0.025, 0.975),justify = "left", digits=2)
XX <- model.matrix(~1+xx)
XX
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
XX = xx,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 3000,
n.iter     = 5000)
# check results
print(jagsfit,intervals=c(0.025, 0.975),justify = "left", digits=2)
XX
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 3000,
n.iter     = 5000)
XX <- model.matrix(~1+xx)
K <- ncol(X)
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
XX = XX,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 3000,
n.iter     = 5000)
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
# Bin data for visualization
binx<-0.25
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
binx<-0.75
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
# Construct data dictionary
logitmod <-data.frame(by, x1)
X <- model.matrix(~ 1+x1+I(x1^2)+I(x1^3),
data = logitmod)
XX <- model.matrix(~1+xx+I(xx^2)+I(xx^3))
K <- ncol(X)
logit_data <- list(Y  = logitmod$by, # Response variable
X  = X,           # Predictors
K  = K,           # Number of Predictors including the intercept
N  = nobs,        # Sample size
XX = XX,
M = M
)
# JAGS code
LOGIT<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Likelihood function
for (i in 1:N){
Y[i] ~ dbern(p[i])
logit(p[i]) <- eta[i]
eta[i]  <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-inprod(beta[], XX[j,])
logit(px[j]) <- etax[j]
Yx[j]~dbern(px[j])
}
}"
#A function to generate initial values for mcmc
inits  <- function () {
list(beta  = rnorm(ncol(X), 0, 0.1)  )
}
# define parameters
params <- c("beta","px")
# Fit
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 3000,
n.iter     = 5000)
# check results
print(jagsfit,intervals=c(0.025, 0.975),justify = "left", digits=2)
# Plot
y <- jagsresults(x=jagsfit, params=c('px'))
x <- xx
gdata <- data.frame(x =xx, mean = y[,"mean"],lwr1=y[,"25%"],lwr2=y[,"2.5%"],upr1=y[,"75%"],upr2=y[,"97.5%"])
# Bin data for visualization
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
binx<-0.75
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
binx<-0.25
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
binx<-0.5
t.breaks <-cut(x1, seq(min(x1),max(x1), by=binx))
means <-tapply(by, t.breaks, mean)
semean <-function(x) sd(x)/sqrt(length(x))
means.se <-tapply(by, t.breaks, semean)
gbin<-data.frame(x=seq(binx+min(x1),max(x1), by=binx),y=means)
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))
jagsresults(x=jagsfit, params=c("beta"))
jagsfit<- jags(data       = logit_data,
inits      = inits,
parameters = params,
model      = textConnection(LOGIT),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 8000)
# check results
jagsresults(x=jagsfit, params=c("beta"))
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of SF activity")
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="blue",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="blue3")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="cyan",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")
ggplot(logitmod,aes(x=x1,y=by))+
geom_point(colour="red",size=1,alpha=0.85,position = position_jitter (h = 0.075))+
geom_point(aes(x=x,y=y),size=2.75,data=gbin,colour="cyan")+
geom_errorbar(data=gbin,aes(x=x,y=y,ymin=y-2*means.se,ymax=y+2*means.se),alpha=0.85,
colour="cyan",width=0.005)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange2"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+coord_cartesian(ylim=c(0,1))+xlab(expression(log~x[mol]))+ylab("Probability of star formation activity")
library(LearnBayes)
triplot(c(240, 760), c(7,50))
triplot(c(24, 76), c(7*1000,50*1000))
triplot(c(24, 76), c(7*100,50*100))
triplot(c(24, 76), c(7*10,50*10))
triplot(c(24, 76), c(7*50,50*50))
