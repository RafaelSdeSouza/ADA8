# From Bayesian Models for Astrophysical Data
# by Hilbe, de Souza & Ishida, 2016, Cambridge Univ. Press
# Chapter 4 - Normal linear model in R using JAGS
# 1 response (y) and 1 explanatory variable (x1)
require(R2jags)
source("https://raw.githubusercontent.com/RafaelSdeSouza/ADA8/master/Auxiliar_functions/jagsresults.R")
require(ggplot2)
set.seed(1056)                 # set seed to replicate example
nobs= 500                      # number of obs in model
x1 <- runif(nobs,-10,10)               # random uniform variable
xb <- -3 + 6*x1-1.75*x1^2+0.25*x1^3
y <- rnorm(nobs, xb, sd=20)      # create y as adjusted random normal variate
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
X <- model.matrix(~ 1 + x1+I(x1^2)+I(x1^3))
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- beta[1]+beta[2]*X[i,2]+beta[3]*X[i,2]^2+beta[4]*X[i,2]^3
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]+beta[3]*xx[j]^2+beta[4]*xx[j]^3
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
jagsresults(x=jagsfit, params=c("beta", "sigma"))
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.75,colour="green3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.45, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
pac <-c("R2jags","MASS","scales","mcmcplots","ggplot2","plot3D")
pac
pac <-c("R2jags","MASS","scales","mcmcplots","ggplot2","plot3D");
# JAGS Normal Model with errors
#  Required libraries
require(R2jags)
library(ggplot2)
library(scales)
library(mcmcplots)
# Read data
dat<-read.csv("https://raw.githubusercontent.com/emilleishida/BMAD/master/data/HR/HR.csv",header = T)
nobs = nrow(dat)
obsx1 <- dat$LogMass
errx1 <- dat$e_LogMass
obsy  <- dat$HR
erry <- dat$e_HR
K   <- 2
# Prepare data for prediction
M=500
xx = seq(from = 0.75*min(obsx1),
to = 1.25*max(obsx1),
length.out = M)
# Prepare data to JAGS
jags_data <- list(
obsx1 = obsx1,
obsy = obsy,
errx1=errx1,
erry=erry,
N = nobs,
M = M,
K = K,
xx=xx,
)
# Normal Model
NORM_errors<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) {
beta[i] ~ dnorm(0, 1e-3)
}
# Gamma prior for standard deviation
tau~dgamma(1e-3,1e-3)  # precision
sigma<-1/sqrt(tau)      # standard deviation
# Diffuse normal priors for true x
for (i in 1:N){
x1[i]~dnorm(0,1e-3)
}
# Likelihood function
for (i in 1:N){
obsy[i]~dnorm(y[i],pow(erry[i],-2))
y[i]~dnorm(mu[i],tau)
obsx1[i]~dnorm(x1[i],pow(errx1[i],-2))
mu[i]<-beta[1]+beta[2]*x1[i]
}
# Prediction new data
for (j in 1:M){
mux[j]<-beta[1]+beta[2]*xx[j]
Yx[j]~dnorm(muxP[j],tau)
}
}"
inits <- function () {
list(
beta = matrix(rnorm(2, 0, 0.01)))
}
params0 <- c("beta", "sigma")
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 3,
n.iter     = 40000,
n.thin     = 1,
n.burnin   = 15000)
print(jagsfit0,justify = "left", digits=3)
dat
nobs = nrow(dat)
obsx1 <- dat$LogMass
errx1 <- dat$e_LogMass
obsy  <- dat$HR
erry <- dat$e_HR
# Prepare data for prediction
M=500
xx = seq(from = 0.75*min(obsx1),
to = 1.25*max(obsx1),
length.out = M)
# Prepare data to JAGS
jags_data <- list(
obsx1 = obsx1,
obsy = obsy,
errx1=errx1,
erry=erry,
N = nobs,
M = M,
K = K,
xx=xx
)
# Prepare data to JAGS
jags_data
# Normal Model
NORM_errors<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) {
beta[i] ~ dnorm(0, 1e-3)
}
# Gamma prior for standard deviation
tau~dgamma(1e-3,1e-3)  # precision
sigma<-1/sqrt(tau)      # standard deviation
# Diffuse normal priors for true x
for (i in 1:N){
x1[i]~dnorm(0,1e-3)
}
# Likelihood function
for (i in 1:N){
obsy[i]~dnorm(y[i],pow(erry[i],-2))
y[i]~dnorm(mu[i],tau)
obsx1[i]~dnorm(x1[i],pow(errx1[i],-2))
mu[i]<-beta[1]+beta[2]*x1[i]
}
# Prediction new data
for (j in 1:M){
mux[j]<-beta[1]+beta[2]*xx[j]
Yx[j]~dnorm(muxP[j],tau)
}
}"
inits <- function () {
list(
beta = matrix(rnorm(2, 0, 0.01)))
}
params0 <- c("beta", "sigma")
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 3,
n.iter     = 40000,
n.thin     = 1,
n.burnin   = 15000)
print(jagsfit0,justify = "left", digits=3)
NORM_errors<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) {
beta[i] ~ dnorm(0, 1e-3)
}
# Gamma prior for standard deviation
tau~dgamma(1e-3,1e-3)  # precision
sigma<-1/sqrt(tau)      # standard deviation
# Diffuse normal priors for true x
for (i in 1:N){
x1[i]~dnorm(0,1e-3)
}
# Likelihood function
for (i in 1:N){
obsy[i]~dnorm(y[i],pow(erry[i],-2))
y[i]~dnorm(mu[i],tau)
obsx1[i]~dnorm(x1[i],pow(errx1[i],-2))
mu[i]<-beta[1]+beta[2]*x1[i]
}
# Prediction new data
for (j in 1:M){
mux[j]<-beta[1]+beta[2]*xx[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = matrix(rnorm(2, 0, 0.01)))
}
params0 <- c("beta", "sigma")
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 3,
n.iter     = 40000,
n.thin     = 1,
n.burnin   = 15000)
print(jagsfit0,justify = "left", digits=3)
inits <- function () {
list(
beta = rnorm(2, 0, 0.01))
}
params0 <- c("beta", "sigma")
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 3,
n.iter     = 40000,
n.thin     = 1,
n.burnin   = 15000)
print(jagsfit0,justify = "left", digits=3)
jagsresults(x=jagsfit, params=c("beta", "sigma"))
source("https://raw.githubusercontent.com/RafaelSdeSouza/ADA8/master/Auxiliar_functions/jagsresults.R")
jagsresults(x=jagsfit, params=c("beta", "sigma"))
jagsresults(x=jagsfit0 , params=c("beta", "sigma"))
jagsresults(x=jagsfit0 , params=c("beta", "sigma"),signif=2)
params0 <- c("beta", "sigma","Yx")
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 3,
n.iter     = 40000,
n.thin     = 1,
n.burnin   = 15000)
jagsresults(x=jagsfit0 , params=c("beta", "sigma"),signif=2)
yx <- jagsresults(x=jagsfit0, params=c('Yx'))
gdata <- data.frame(x =xx, mean = yx[,"50%"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
nmod <- data.frame(obsx1,obsy)
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.01,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.01,colour="gray70")+
geom_point(size=2)+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("green")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("green3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="green2",linetype="dashed",size=1.5)+
theme_bw()+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.01,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.01,colour="gray70")+
geom_point(size=2)+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("green")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("green3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="green2",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.01,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.01,colour="gray70")+
geom_point(size=2,color="blue")+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("orange")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("orange3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="green2",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.01,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.01,colour="gray70")+
geom_point(size=2,color="blue")+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("orange")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("orange3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="red",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
# JAGS Normal Model with errors
#  Required libraries
require(R2jags)
library(ggplot2)
source("https://raw.githubusercontent.com/RafaelSdeSouza/ADA8/master/Auxiliar_functions/jagsresults.R")
# Read data
dat<-read.csv("https://raw.githubusercontent.com/emilleishida/BMAD/master/data/HR/HR.csv",header = T)
nobs = nrow(dat)
obsx1 <- dat$LogMass
errx1 <- dat$e_LogMass
obsy  <- dat$HR
erry <- dat$e_HR
K   <- 2
# Prepare data for prediction
M=500
xx = seq(from = 0.75*min(obsx1),
to = 1.25*max(obsx1),
length.out = M)
# Prepare data to JAGS
jags_data <- list(
obsx1 = obsx1,
obsy = obsy,
errx1=errx1,
erry=erry,
N = nobs,
M = M,
K = K,
xx=xx
)
# Normal Model
NORM_errors<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) {
beta[i] ~ dnorm(0, 1e-3)
}
# Gamma prior for standard deviation
tau~dgamma(1e-3,1e-3)  # precision
sigma<-1/sqrt(tau)      # standard deviation
# Diffuse normal priors for true x
for (i in 1:N){
x1[i]~dnorm(0,1e-3)
}
# Likelihood function
for (i in 1:N){
obsy[i]~dnorm(y[i],pow(erry[i],-2))
y[i]~dnorm(mu[i],tau)
obsx1[i]~dnorm(x1[i],pow(errx1[i],-2))
mu[i]<-beta[1]+beta[2]*x1[i]
}
# Prediction new data
for (j in 1:M){
mux[j]<-beta[1]+beta[2]*xx[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(2, 0, 0.01))
}
params0 <- c("beta", "sigma","Yx")
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 3,
n.iter     = 40000,
n.thin     = 1,
n.burnin   = 15000)
jagsresults(x=jagsfit0 , params=c("beta", "sigma"),signif=2)
yx <- jagsresults(x=jagsfit0, params=c('Yx'))
gdata <- data.frame(x =xx, mean = yx[,"50%"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
nmod <- data.frame(obsx1,obsy)
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.01,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.01,colour="gray70")+
geom_point(size=2,color="blue")+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("orange")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("orange3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="red",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 4,
n.iter     = 15000,
n.thin     = 1,
n.burnin   = 5000)
jagsresults(x=jagsfit0 , params=c("beta", "sigma"),signif=2)
NORM_errors<-"model{
# Diffuse normal priors for predictors
for (i in 1:K) {
beta[i] ~ dnorm(0, 1e-1)
}
# Gamma prior for standard deviation
tau~dgamma(1e-3,1e-3)  # precision
sigma<-1/sqrt(tau)      # standard deviation
# Diffuse normal priors for true x
for (i in 1:N){
x1[i]~dnorm(0,1e-3)
}
# Likelihood function
for (i in 1:N){
obsy[i]~dnorm(y[i],pow(erry[i],-2))
y[i]~dnorm(mu[i],tau)
obsx1[i]~dnorm(x1[i],pow(errx1[i],-2))
mu[i]<-beta[1]+beta[2]*x1[i]
}
# Prediction new data
for (j in 1:M){
mux[j]<-beta[1]+beta[2]*xx[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(2, 0, 0.01))
}
params0 <- c("beta", "sigma","Yx")
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 4,
n.iter     = 15000,
n.thin     = 1,
n.burnin   = 5000)
jagsresults(x=jagsfit0 , params=c("beta", "sigma"),signif=2)
jagsfit0 <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(NORM_errors),
n.chains   = 4,
n.iter     = 50000,
n.thin     = 1,
n.burnin   = 10000)
jagsresults(x=jagsfit0 , params=c("beta", "sigma"),signif=2)
yx <- jagsresults(x=jagsfit0, params=c('Yx'))
gdata <- data.frame(x =xx, mean = yx[,"50%"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
nmod <- data.frame(obsx1,obsy)
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.01,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.01,colour="gray70")+
geom_point(size=2,color="blue")+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("orange")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("orange3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="red",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.05,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.05,colour="gray70")+
geom_point(size=2,color="blue")+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("orange")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("orange3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="red",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
ggplot(nmod,aes(x=obsx1,y=obsy))+
geom_errorbar(aes(ymin=obsy-erry,ymax=obsy+erry),alpha=0.5,width=0.025,colour="gray70")+
geom_errorbarh(aes(xmin=obsx1-errx1,
xmax=obsx1+errx1),alpha=0.5,height=0.025,colour="gray70")+
geom_point(size=2,color="blue")+
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr2, ymax=upr2), alpha=0.15, fill=c("orange")) +
geom_ribbon(data=gdata,aes(x=xx,y=mean,ymin=lwr1, ymax=upr1), alpha=0.50, fill=c("orange3")) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="red",linetype="dashed",size=1.5)+
theme_bw()+
ylab(expression(mu[SN]-mu[z]))+
xlab(expression(log~M/M['\u0298']))+
coord_cartesian(xlim=c(8,13),ylim=c(-1,1))
